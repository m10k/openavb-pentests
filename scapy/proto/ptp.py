#!/usr/bin/env python

# ptp.py - A PTP implementation for scapy
# Copyright (C) 2016 Matthias Kruk
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

from scapy.all import *

class XShortLenField(XShortField):
    def i2m(self, pkt, x):
        if x is None:
            x = len(pkt.payload)
        return(x)

class PTP_Timestamp(Packet):
    name = "PTP_Timestamp "
    fields_desc = [ BitField("s", 0, 48),
                    BitField("ns", 0, 32) ]

    def __add__(self, delta):
        s = self.s + delta.s
        ns = self.ns + delta.ns
        
        s += ns / 1000000000
        ns %= 1000000000
        
        return(PTP_Timestamp(s = s, ns = ns))

    def __sub__(self, delta):
        s = self.s - delta.s
        ns = self.ns - delta.ns

        if ns < 0:
            nns = ns % 1000000000
            s += (nns + ns) / 1000000000
            ns = nns

        return(PTP_Timestamp(s = s, ns = ns))

class PTP_Sync(Packet):
    name = "PTP_Sync "
    fields_desc = [ PacketField("ts", PTP_Timestamp(), PTP_Timestamp) ]

class PTP_DelayReq(Packet):
    name = "PTP_DelayReq "
    fields_desc = [ PacketField("ts", PTP_Timestamp(), PTP_Timestamp) ]

class PTP_PDelayReq(Packet):
    name = "PTP_PDelayReq "
    fields_desc = [ PacketField("ts", PTP_Timestamp(), PTP_Timestamp),
                    BitField("resv", 0, 80) ]

class PTP_DelayResp(Packet):
    name = "PTP_DelayResp"
    fields_desc = [ PacketField("ts", PTP_Timestamp(), PTP_Timestamp),
                    XLongField("clock_identity", 0),
                    XShortField("port_identity", 0) ]

class PTP_PDelayResp(Packet):
    name = "PTP_PDelayResp"
    fields_desc = [ PacketField("ts", PTP_Timestamp(), PTP_Timestamp),
                    XLongField("clock_identity", 0),
                    XShortField("port_identity", 0) ]

class PTP_Followup(Packet):
    name = "PTP_Followup"
    fields_desc = [ PacketField("ts", PTP_Timestamp(), PTP_Timestamp) ]

class PTP_PDelayRespFup(Packet):
    name = "PTP_PDelayRespFup"
    fields_desc = [ PacketField("ts", PTP_Timestamp(), PTP_Timestamp),
                    XLongField("clock_identity", 0),
                    XShortField("port_identity", 0) ]

class PTP_Signal(Packet):
    name = "PTP_Signal"
    fields_desc = []

class PTP_Management(Packet):
    name = "PTP_Management"
    fields_desc = []

class PTP_Announce(Packet):
    ATOMIC_CLOCK = 0x10
    GPS          = 0x20
    RADIO        = 0x30
    PTP          = 0x40
    NTP          = 0x50
    MANUAL       = 0x60
    OTHER        = 0x90
    INT_OSCI     = 0xa0

    TimeSource = { ATOMIC_CLOCK : "Atomic Clock",
                   GPS          : "GPS",
                   RADIO        : "Terrestrial Radio",
                   PTP          : "PTP",
                   NTP          : "NTP",
                   MANUAL       : "Manually set",
                   OTHER        : "Other",
                   INT_OSCI     : "Internal oscillator" }
                                      
    name = "PTP_Announce"
    fields_desc = [ PacketField("ts", PTP_Timestamp(), PTP_Timestamp),
                    XShortField("utc_offset", 0),
                    XByteField("resv", 0),
                    XByteField("priority", 128),
                    XIntField("quality", 0x80fe7060),
                    XByteField("priority2", 128),
                    XLongField("clock_identity", 0),
                    XShortField("steps_removed", 0),
                    BitEnumField("source", None, 8, TimeSource),
                    XShortField("tlv_type", 8),
                    XShortField("tlv_len", 8),
                    StrField("tlv_path", "") ]

class PTP(Packet):
    name = "PTP "

    SYNC            = 0
    DELAY_REQ       = 1
    PDELAY_REQ      = 2
    PDELAY_RESP     = 3
    FOLLOWUP        = 8
    DELAY_RESP      = 9
    PDELAY_RESP_FUP = 10
    ANNOUNCE        = 11
    SIGNAL          = 12
    MANAGEMENT      = 13

    MessageType = { SYNC            : "SYNC",
                    DELAY_REQ       : "DELAY_REQ",
                    PDELAY_REQ      : "PDELAY_REQ",
                    PDELAY_RESP     : "PDELAY_RESP",
                    FOLLOWUP        : "FOLLOWUP",
                    DELAY_RESP      : "DELAY_RESP",
                    PDELAY_RESP_FUP : "PDELAY_RESP_FUP",
                    ANNOUNCE        : "ANNOUNCE",
                    SIGNAL          : "SIGNAL",
                    MANAGEMENT      : "MANAGEMENT" }

    TypeMap = [ (SYNC,            PTP_Sync,          0),
                (DELAY_REQ,       PTP_DelayReq,      1),
                (PDELAY_REQ,      PTP_PDelayReq,     5),
                (PDELAY_RESP,     PTP_PDelayResp,    5),
                (FOLLOWUP,        PTP_Followup,      2),
                (DELAY_RESP,      PTP_DelayResp,     3),
                (PDELAY_RESP_FUP, PTP_PDelayRespFup, 5),
                (ANNOUNCE,        PTP_Announce,      5),
                (SIGNAL,          PTP_Signal,        5),
                (MANAGEMENT,      PTP_Management,    5) ]

    Flags = [ "SECURITY",
              "PROFILE_SPECIFIC_2",
              "PROFILE_SPECIFIC_1",
              "__unused__0",
              "__unused__1",
              "UNICAST",
              "TWO_STEP",
              "ALT_MASTER",
              "__unused__2",
              "__unused__3",
              "FREQ_TRACEABLE",
              "TIME_TRACEABLE",
              "TIMESCALE",
              "UTC_REASONABLE",
              "L1_59",
              "L1_61" ]
    
    fields_desc = [ BitField("transport_specific", 0, 4),
                    BitEnumField("type", None, 4, MessageType),
                    BitField("resv", 0, 4),
                    BitField("version", 2, 4),
                    XShortLenField("length", 34),
                    XByteField("domain", 0),
                    XByteField("resv_", 0),
                    FlagsField("flags", 0, 16, Flags),
                    XLongField("correction", 0),
                    XIntField("resv__", 0),
                    XLongField("clock_identity", 0),
                    XShortField("port_identity", 1),
                    XShortField("sequence_id", 0),
                    XByteField("control", 0),
                    XByteField("log_intv", 0) ]

bind_layers(Ether, PTP, {"type": 0x88f7})

for mapping in PTP.TypeMap:
    bind_layers(PTP, mapping[1], {"type": mapping[0]})
